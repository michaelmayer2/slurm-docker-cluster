FROM ubuntu:20.04

LABEL org.opencontainers.image.source="https://github.com/michaelmayer2/slurm-docker-cluster" \
      org.opencontainers.image.title="slurm-docker-cluster" \
      org.opencontainers.image.description="Slurm Docker cluster on Ububtu 20.04 LTS" \
      org.label-schema.docker.cmd="docker-compose up -d" \
      maintainer="Michael Mayer"

ARG SLURM_TAG=slurm-20-11-8-1
ARG GOSU_VERSION=1.11
ARG R_VERSIONS="3.6.3 4.0.5 4.1.2"
ARG RSWB_VERSION="2021.09.0-351.pro6"
ARG PROXY

RUN echo $SLURM_TAG

RUN if test -n $PROXY; then echo "Acquire::http { Proxy \"http://$PROXY:3142\"; };" >> /etc/apt/apt.conf.d/01proxy; fi

## Install R and RStudio Workbench

COPY rstudio/create.R /tmp/create.R 

RUN apt-get update -y && \
	apt-get install -y gdebi-core curl wget && \ 
	IFS=" "; for R_VERSION in $R_VERSIONS ; \
	do \
		curl -O https://cdn.rstudio.com/r/ubuntu-2004/pkgs/r-${R_VERSION}_1_amd64.deb && \
		gdebi -n r-${R_VERSION}_1_amd64.deb && \
		rm -f r-${R_VERSION}_1_amd64.deb && \
		/opt/R/$R_VERSION/bin/Rscript /tmp/create.R ;\
	done && \
	curl -O https://download2.rstudio.org/server/bionic/amd64/rstudio-workbench-${RSWB_VERSION}-amd64.deb && \
	gdebi -n rstudio-workbench-${RSWB_VERSION}-amd64.deb && \
	rm -f rstudio-workbench-${RSWB_VERSION}-amd64.deb && \
    	apt clean all && \
    	rm -rf /var/cache/apt

COPY rstudio/launcher.conf /etc/rstudio/launcher.conf
COPY rstudio/launcher.slurm.conf /etc/rstudio/launcher.slurm.conf
COPY rstudio/launcher.slurm.profiles.conf /etc/rstudio/launcher.slurm.profiles.conf
COPY rstudio/rserver.conf /etc/rstudio/rserver.conf

RUN /bin/bash -c "set -x \
    && groupadd -r --gid=105 munge \
    && useradd -r -s /bin/bash -g munge --uid=105 munge"


## Install SLURM

### Install prerequisites/dependencies

RUN set -ex \
    && apt-get update \
    && apt-get -y install \
       wget \
       bzip2 \
       perl \
       gcc-9 \
       g++-9 \
       gcc \
       g++ \
       git \
       gnupg \
       make \
       munge \
       libmunge-dev \
       python-is-python3 \
       python3.8-dev \
       python3-pip \
       cython \
       cython3 \
       mariadb-server \
       mariadb-client \
       libmariadbd-dev \
       psmisc \
       bash-completion \
       vim \
       python-nose \
       cython \
    && apt clean all \
    && rm -rf /var/cache/apt

### Build SLURM from source and add folders and permissions

RUN /bin/bash -c "set -x \
    && git clone https://github.com/SchedMD/slurm.git \
    && pushd slurm \
    && git checkout tags/$SLURM_TAG \
    && ./configure --enable-debug --prefix=/usr --sysconfdir=/etc/slurm \
        --with-mysql_config=/usr/bin  --libdir=/usr/lib64 >& /build.log\
    && make install \
    && install -D -m644 etc/cgroup.conf.example /etc/slurm/cgroup.conf.example \
    && install -D -m644 etc/slurm.conf.example /etc/slurm/slurm.conf.example \
    && install -D -m644 etc/slurmdbd.conf.example /etc/slurm/slurmdbd.conf.example \
    && install -D -m644 contribs/slurm_completion_help/slurm_completion.sh /etc/profile.d/slurm_completion.sh \
    && popd \
    && rm -rf slurm \
    && groupadd -r --gid=995 slurm \
    && useradd -r -g slurm --uid=995 slurm \
    && mkdir -p /etc/sysconfig/slurm \
        /var/spool/slurmd \
        /var/run/slurmd \
        /var/run/slurmdbd \
        /var/lib/slurmd \
        /var/log/slurm \
        /data \
    && touch /var/lib/slurmd/node_state \
        /var/lib/slurmd/front_end_state \
        /var/lib/slurmd/job_state \
        /var/lib/slurmd/resv_state \
        /var/lib/slurmd/trigger_state \
        /var/lib/slurmd/assoc_mgr_state \
        /var/lib/slurmd/assoc_usage \
        /var/lib/slurmd/qos_usage \
        /var/lib/slurmd/fed_mgr_state \
    && chown -R slurm:slurm /var/*/slurm* \
    && /sbin/create-munge-key -f"

COPY slurm/slurm.conf /etc/slurm/slurm.conf
COPY slurm/slurmdbd.conf /etc/slurm/slurmdbd.conf

RUN chmod 0600 /etc/slurm/slurmdbd.conf



## Configure a mail client and add a couple of nice to have tools

RUN mkdir -p /etc/postfix

COPY rstudio/main.cf /etc/postfix/main.cf
ENV DEBIAN_FRONTEND=noninteractive

RUN set -ex \
    && apt-get update \
    && apt-get -y install \
       net-tools iputils-ping postfix mailutils \
    && apt clean all \
    && rm -rf /var/cache/apt



## Install gosu

RUN set -ex \
    && wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-amd64" \
    && wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-amd64.asc" \
    && export GNUPGHOME="$(mktemp -d)" \
    && gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4 \
    && gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu \
    && rm -rf "${GNUPGHOME}" /usr/local/bin/gosu.asc \
    && chmod +x /usr/local/bin/gosu \
    && gosu nobody true


## Add test user mm

RUN groupadd mm -g 2048 \
        && useradd mm -s /bin/bash -u 2048 -g 2048\
        && mkdir /home/mm \
        && chown mm:mm /home/mm \
        && bash -c "echo -e \"test123\\ntest123\" | passwd mm"


COPY scripts/docker-entrypoint.sh /usr/local/bin/docker-entrypoint.sh
ENTRYPOINT ["/usr/local/bin/docker-entrypoint.sh"]

CMD ["slurmdbd"]
